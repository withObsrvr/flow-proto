syntax = "proto3";

package consumer;

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

option go_package = "github.com/withObsrvr/flow-proto/gen/consumer;consumer";

// DataMessage represents the basic message that the consumer will receive.
message DataMessage {
  // The raw data payload.
  bytes payload = 1;
  
  // Enhanced metadata with support for complex values.
  google.protobuf.Struct metadata = 2;
  
  // Timestamp when the message was created.
  google.protobuf.Timestamp timestamp = 3;
  
  // Content type of the payload (e.g., "application/json", "stellar/xdr")
  string content_type = 4;
  
  // Unique message identifier
  string message_id = 5;
  
  // Source information about the message origin
  google.protobuf.Struct source_info = 6;
}

// ConsumeRequest wraps a DataMessage to be consumed.
message ConsumeRequest {
  DataMessage message = 1;
  
  // Optional request ID for correlation
  string request_id = 2;
}

// ConsumeResponse acknowledges the consumption of a message.
message ConsumeResponse {
  bool success = 1;
  string error_message = 2;
  
  // Detailed error information
  ErrorInfo error_info = 3;
  
  // Response correlation ID matching the request
  string request_id = 4;
}

// Error information for detailed reporting
message ErrorInfo {
  // Error type (e.g., "db", "network", "parsing")
  string type = 1;
  
  // Error severity 
  enum Severity {
    UNKNOWN = 0;
    FATAL = 1;
    ERROR = 2;
    WARNING = 3;
    INFO = 4;
  }
  Severity severity = 2;
  
  // Error message
  string message = 3;
  
  // Additional context
  google.protobuf.Struct context = 4;
}

// Batch consume request for multiple messages
message BatchConsumeRequest {
  repeated DataMessage messages = 1;
  
  // Batch ID for correlation
  string batch_id = 2;
}

// Batch consume response
message BatchConsumeResponse {
  bool overall_success = 1;
  
  // Individual results for each message
  repeated MessageResult results = 2;
  
  // Batch ID for correlation
  string batch_id = 3;
}

// Result for an individual message in a batch
message MessageResult {
  bool success = 1;
  string error_message = 2;
  ErrorInfo error_info = 3;
  int32 message_index = 4;
}

// Enhanced capabilities request
message CapabilitiesRequest {
  // Optional client information
  map<string, string> client_info = 1;
}

// Enhanced capabilities response
message CapabilitiesResponse {
  string service_name = 1;
  string service_version = 2;
  repeated string supported_features = 3;
  
  // Rich capabilities information
  google.protobuf.Struct capabilities = 4;
  
  // Supported data formats
  repeated string supported_formats = 5;
  
  // Schema information provided by the consumer
  repeated SchemaInfo schemas = 6;
}

// Schema information
message SchemaInfo {
  string name = 1;
  string description = 2;
  string definition = 3;
  string format = 4;  // e.g., "sql", "json-schema", "avro"
}

// Enhanced configuration request
message ConfigureRequest {
  // Configuration as structured data
  google.protobuf.Struct config = 1;
  
  // Optional validation mode
  enum ValidationMode {
    VALIDATE_AND_APPLY = 0;
    VALIDATE_ONLY = 1;
  }
  ValidationMode validation_mode = 2;
}

// Enhanced configuration response
message ConfigureResponse {
  bool success = 1;
  string error_message = 2;
  
  // Validation issues
  repeated ValidationIssue validation_issues = 3;
  
  // Current configuration after changes
  google.protobuf.Struct current_config = 4;
}

// Validation issue details
message ValidationIssue {
  enum Severity {
    ERROR = 0;
    WARNING = 1;
    INFO = 2;
  }
  Severity severity = 1;
  string field = 2;
  string message = 3;
}

// Health check request
message HealthCheckRequest {
  bool detailed = 1;
}

// Health check response
message HealthCheckResponse {
  enum ServingStatus {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
    SERVICE_UNKNOWN = 3;
    STARTING = 4;
    STOPPING = 5;
  }
  ServingStatus status = 1;
  
  // Detailed component health
  repeated ComponentHealth components = 2;
  
  // Service metrics
  google.protobuf.Struct metrics = 3;
}

// Component health information
message ComponentHealth {
  string component_name = 1;
  HealthCheckResponse.ServingStatus status = 2;
  string message = 3;
}

// Advanced metrics request with filtering
message MetricsRequest {
  // Optional metric names to filter by
  repeated string metric_names = 1;
  
  // Include detailed metrics breakdown
  bool detailed = 2;
}

// Enhanced metrics response
message MetricsResponse {
  // Metrics as structured data
  google.protobuf.Struct metrics = 1;
  
  // Last updated timestamp
  google.protobuf.Timestamp updated_at = 2;
}

// Lifecycle control request
message LifecycleRequest {
  enum Operation {
    INITIALIZE = 0;
    SHUTDOWN = 1;
    PAUSE = 2;
    RESUME = 3;
    RESET = 4;
  }
  Operation operation = 1;
  
  // Operation parameters
  google.protobuf.Struct parameters = 2;
}

// Lifecycle control response
message LifecycleResponse {
  bool success = 1;
  string message = 2;
  
  // Current status after operation
  string status = 3;
}

// ConsumerService defines the enhanced RPC interface for a consumer.
service ConsumerService {
  // Basic operations
  rpc GetCapabilities(CapabilitiesRequest) returns (CapabilitiesResponse);
  rpc Configure(ConfigureRequest) returns (ConfigureResponse);
  
  // Single message consumption
  rpc Consume(ConsumeRequest) returns (ConsumeResponse);
  
  // Batch message consumption
  rpc BatchConsume(BatchConsumeRequest) returns (BatchConsumeResponse);
  
  // Streaming message consumption
  rpc StreamConsume(stream ConsumeRequest) returns (stream ConsumeResponse);
  
  // Health and metrics
  rpc CheckHealth(HealthCheckRequest) returns (HealthCheckResponse);
  rpc GetMetrics(MetricsRequest) returns (MetricsResponse);
  
  // Lifecycle management
  rpc Control(LifecycleRequest) returns (LifecycleResponse);
}

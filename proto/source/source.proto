syntax = "proto3";

package source;

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

option go_package = "github.com/withObsrvr/flow-proto/gen/source;source";

// DataMessage is the basic message exchanged from a Source.
// Enhanced to support multiple payload types and richer metadata.
message DataMessage {
  // The raw data payload.
  bytes payload = 1;
  
  // Metadata about the message, now supporting complex values.
  // Values can be strings, numbers, booleans, or nested objects.
  google.protobuf.Struct metadata = 2;
  
  // Timestamp when the message was created.
  google.protobuf.Timestamp timestamp = 3;
  
  // Type of payload to help consumers interpret the data correctly.
  // Examples: "xdr", "json", "avro", "protobuf", "raw"
  string content_type = 4;
  
  // Unique identifier for the message.
  string message_id = 5;
  
  // Source information as a structured object
  google.protobuf.Struct source_info = 6;
  
  // Sequence information to help with ordering and deduplication.
  int64 sequence_number = 7;
}

// Enhanced capabilities response with more detailed information.
message CapabilitiesRequest {}

message CapabilitiesResponse {
  // Basic service information
  string service_name = 1;
  string service_version = 2;
  repeated string supported_features = 3;
  
  // Additional capabilities as structured data
  google.protobuf.Struct capabilities = 4;
  
  // Supported payload types this source can produce
  repeated string supported_payload_types = 5;
  
  // Configuration schema - can be used by clients to validate config
  google.protobuf.Struct config_schema = 6;
}

// Enhanced configuration with structured data.
message ConfigureRequest {
  // Configuration as structured data instead of flat key-value pairs
  google.protobuf.Struct config = 1;
  
  // Optional configuration validation mode
  enum ValidationMode {
    VALIDATE_AND_APPLY = 0;  // Validate and apply if valid
    VALIDATE_ONLY = 1;       // Only validate, don't apply
  }
  ValidationMode validation_mode = 2;
}

message ConfigureResponse {
  bool success = 1;
  string error_message = 2;
  
  // Validation results if requested
  repeated ValidationIssue validation_issues = 3;
  
  // Current configuration after applying changes
  google.protobuf.Struct current_config = 4;
}

// Validation issue details for configuration
message ValidationIssue {
  enum Severity {
    ERROR = 0;
    WARNING = 1;
    INFO = 2;
  }
  Severity severity = 1;
  string field = 2;
  string message = 3;
}

// Enhanced start request with pagination and state options.
message StartRequest {
  // Optional parameters as structured data
  google.protobuf.Struct parameters = 1;
  
  // Pagination and batching options
  PaginationOptions pagination = 2;
  
  // Whether to resume from the last saved state
  bool resume_from_last_state = 3;
  
  // Filter criteria to apply when streaming data
  google.protobuf.Struct filters = 4;
}

message PaginationOptions {
  // Maximum number of items to fetch in a batch
  int32 batch_size = 1;
  
  // Opaque token for continuing a previous request
  string continuation_token = 2;
  
  // Maximum time to wait for a full batch (in seconds)
  double max_wait_time = 3;
}

message StartResponse {
  bool success = 1;
  string error_message = 2;
  
  // Information about the started stream
  string stream_id = 3;
  
  // Initial state information
  google.protobuf.Struct initial_state = 4;
}

// Stop request with options
message StopRequest {
  // Optional: Specific stream ID to stop (if multiple streams exist)
  string stream_id = 1;
  
  // Whether to save the current state before stopping
  bool save_state = 2;
}

message StopResponse {
  bool success = 1;
  string error_message = 2;
  
  // Final state when stopping (if requested)
  google.protobuf.Struct final_state = 3;
}

// State management for resumable operations
message GetStateRequest {
  // Optional: State key or namespace
  string state_key = 1;
}

message GetStateResponse {
  // State data as structured information
  google.protobuf.Struct state = 1;
  
  // Last update timestamp
  google.protobuf.Timestamp last_updated = 2;
}

message SetStateRequest {
  // State data to store
  google.protobuf.Struct state = 1;
  
  // Optional: State key or namespace
  string state_key = 2;
}

message SetStateResponse {
  bool success = 1;
  string error_message = 2;
}

// Health check for monitoring
message HealthCheckRequest {
  // Optional detailed check type
  bool detailed = 1;
}

message HealthCheckResponse {
  enum ServingStatus {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
    SERVICE_UNKNOWN = 3;
    STARTING = 4;
    STOPPING = 5;
  }
  ServingStatus status = 1;
  
  // Detailed component health states
  repeated ComponentHealth components = 2;
  
  // Current processing metrics
  google.protobuf.Struct metrics = 3;
}

message ComponentHealth {
  string component_name = 1;
  HealthCheckResponse.ServingStatus status = 2;
  string message = 3;
}

// Source data snapshot - retrieve specific data points
message SnapshotRequest {
  // Identifier(s) for the data to snapshot
  repeated string identifiers = 1;
  
  // Whether to include metadata
  bool include_metadata = 2;
}

message SnapshotResponse {
  repeated DataMessage snapshots = 1;
}

// SourceService defines the enhanced RPC interface for a Source.
service SourceService {
  // Basic operations
  rpc GetCapabilities(CapabilitiesRequest) returns (CapabilitiesResponse);
  rpc Configure(ConfigureRequest) returns (ConfigureResponse);
  rpc StartStreaming(StartRequest) returns (stream DataMessage);
  rpc StopStreaming(StopRequest) returns (StopResponse);
  
  // State management
  rpc GetState(GetStateRequest) returns (GetStateResponse);
  rpc SetState(SetStateRequest) returns (SetStateResponse);
  
  // Health and monitoring
  rpc CheckHealth(HealthCheckRequest) returns (HealthCheckResponse);
  
  // Data operations
  rpc GetSnapshot(SnapshotRequest) returns (SnapshotResponse);
  
  // Bidirectional streaming for interactive operations
  // Allows client to send commands during streaming
  rpc InteractiveStreaming(stream StreamCommand) returns (stream DataMessage);
}

// Commands that can be sent during interactive streaming
message StreamCommand {
  enum CommandType {
    PAUSE = 0;
    RESUME = 1;
    FILTER = 2;
    SEEK = 3;
    ACKNOWLEDGE = 4;
  }
  CommandType command_type = 1;
  
  // Command parameters
  google.protobuf.Struct parameters = 2;
  
  // Correlation ID for matching commands with responses
  string correlation_id = 3;
} 
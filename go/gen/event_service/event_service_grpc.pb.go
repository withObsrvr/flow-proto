// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: event_service/event_service.proto

package event_service

import (
	context "context"
	token_transfer "github.com/withObsrvr/flow-proto/proto/ingest/processors/token_transfer"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EventService_GetTTPEvents_FullMethodName = "/token_transfer_service.EventService/GetTTPEvents"
)

// EventServiceClient is the client API for EventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventServiceClient interface {
	// GetTTPEvents requests a stream of token transfer events for a given ledger range.
	// If end_ledger is 0 or less than start_ledger, the stream is potentially infinite (live).
	GetTTPEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (EventService_GetTTPEventsClient, error)
}

type eventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventServiceClient(cc grpc.ClientConnInterface) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) GetTTPEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (EventService_GetTTPEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventService_ServiceDesc.Streams[0], EventService_GetTTPEvents_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &eventServiceGetTTPEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventService_GetTTPEventsClient interface {
	Recv() (*token_transfer.TokenTransferEvent, error)
	grpc.ClientStream
}

type eventServiceGetTTPEventsClient struct {
	grpc.ClientStream
}

func (x *eventServiceGetTTPEventsClient) Recv() (*token_transfer.TokenTransferEvent, error) {
	m := new(token_transfer.TokenTransferEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventServiceServer is the server API for EventService service.
// All implementations must embed UnimplementedEventServiceServer
// for forward compatibility
type EventServiceServer interface {
	// GetTTPEvents requests a stream of token transfer events for a given ledger range.
	// If end_ledger is 0 or less than start_ledger, the stream is potentially infinite (live).
	GetTTPEvents(*GetEventsRequest, EventService_GetTTPEventsServer) error
	mustEmbedUnimplementedEventServiceServer()
}

// UnimplementedEventServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEventServiceServer struct {
}

func (UnimplementedEventServiceServer) GetTTPEvents(*GetEventsRequest, EventService_GetTTPEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTTPEvents not implemented")
}
func (UnimplementedEventServiceServer) mustEmbedUnimplementedEventServiceServer() {}

// UnsafeEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventServiceServer will
// result in compilation errors.
type UnsafeEventServiceServer interface {
	mustEmbedUnimplementedEventServiceServer()
}

func RegisterEventServiceServer(s grpc.ServiceRegistrar, srv EventServiceServer) {
	s.RegisterService(&EventService_ServiceDesc, srv)
}

func _EventService_GetTTPEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventServiceServer).GetTTPEvents(m, &eventServiceGetTTPEventsServer{stream})
}

type EventService_GetTTPEventsServer interface {
	Send(*token_transfer.TokenTransferEvent) error
	grpc.ServerStream
}

type eventServiceGetTTPEventsServer struct {
	grpc.ServerStream
}

func (x *eventServiceGetTTPEventsServer) Send(m *token_transfer.TokenTransferEvent) error {
	return x.ServerStream.SendMsg(m)
}

// EventService_ServiceDesc is the grpc.ServiceDesc for EventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "token_transfer_service.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTTPEvents",
			Handler:       _EventService_GetTTPEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "event_service/event_service.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: source/source.proto

package source

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SourceService_GetCapabilities_FullMethodName      = "/source.SourceService/GetCapabilities"
	SourceService_Configure_FullMethodName            = "/source.SourceService/Configure"
	SourceService_StartStreaming_FullMethodName       = "/source.SourceService/StartStreaming"
	SourceService_StopStreaming_FullMethodName        = "/source.SourceService/StopStreaming"
	SourceService_GetState_FullMethodName             = "/source.SourceService/GetState"
	SourceService_SetState_FullMethodName             = "/source.SourceService/SetState"
	SourceService_CheckHealth_FullMethodName          = "/source.SourceService/CheckHealth"
	SourceService_GetSnapshot_FullMethodName          = "/source.SourceService/GetSnapshot"
	SourceService_InteractiveStreaming_FullMethodName = "/source.SourceService/InteractiveStreaming"
)

// SourceServiceClient is the client API for SourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SourceServiceClient interface {
	// Basic operations
	GetCapabilities(ctx context.Context, in *CapabilitiesRequest, opts ...grpc.CallOption) (*CapabilitiesResponse, error)
	Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*ConfigureResponse, error)
	StartStreaming(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (SourceService_StartStreamingClient, error)
	StopStreaming(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	// State management
	GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error)
	SetState(ctx context.Context, in *SetStateRequest, opts ...grpc.CallOption) (*SetStateResponse, error)
	// Health and monitoring
	CheckHealth(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// Data operations
	GetSnapshot(ctx context.Context, in *SnapshotRequest, opts ...grpc.CallOption) (*SnapshotResponse, error)
	// Bidirectional streaming for interactive operations
	// Allows client to send commands during streaming
	InteractiveStreaming(ctx context.Context, opts ...grpc.CallOption) (SourceService_InteractiveStreamingClient, error)
}

type sourceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSourceServiceClient(cc grpc.ClientConnInterface) SourceServiceClient {
	return &sourceServiceClient{cc}
}

func (c *sourceServiceClient) GetCapabilities(ctx context.Context, in *CapabilitiesRequest, opts ...grpc.CallOption) (*CapabilitiesResponse, error) {
	out := new(CapabilitiesResponse)
	err := c.cc.Invoke(ctx, SourceService_GetCapabilities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceServiceClient) Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*ConfigureResponse, error) {
	out := new(ConfigureResponse)
	err := c.cc.Invoke(ctx, SourceService_Configure_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceServiceClient) StartStreaming(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (SourceService_StartStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &SourceService_ServiceDesc.Streams[0], SourceService_StartStreaming_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &sourceServiceStartStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SourceService_StartStreamingClient interface {
	Recv() (*DataMessage, error)
	grpc.ClientStream
}

type sourceServiceStartStreamingClient struct {
	grpc.ClientStream
}

func (x *sourceServiceStartStreamingClient) Recv() (*DataMessage, error) {
	m := new(DataMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sourceServiceClient) StopStreaming(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, SourceService_StopStreaming_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceServiceClient) GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error) {
	out := new(GetStateResponse)
	err := c.cc.Invoke(ctx, SourceService_GetState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceServiceClient) SetState(ctx context.Context, in *SetStateRequest, opts ...grpc.CallOption) (*SetStateResponse, error) {
	out := new(SetStateResponse)
	err := c.cc.Invoke(ctx, SourceService_SetState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceServiceClient) CheckHealth(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, SourceService_CheckHealth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceServiceClient) GetSnapshot(ctx context.Context, in *SnapshotRequest, opts ...grpc.CallOption) (*SnapshotResponse, error) {
	out := new(SnapshotResponse)
	err := c.cc.Invoke(ctx, SourceService_GetSnapshot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceServiceClient) InteractiveStreaming(ctx context.Context, opts ...grpc.CallOption) (SourceService_InteractiveStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &SourceService_ServiceDesc.Streams[1], SourceService_InteractiveStreaming_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &sourceServiceInteractiveStreamingClient{stream}
	return x, nil
}

type SourceService_InteractiveStreamingClient interface {
	Send(*StreamCommand) error
	Recv() (*DataMessage, error)
	grpc.ClientStream
}

type sourceServiceInteractiveStreamingClient struct {
	grpc.ClientStream
}

func (x *sourceServiceInteractiveStreamingClient) Send(m *StreamCommand) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sourceServiceInteractiveStreamingClient) Recv() (*DataMessage, error) {
	m := new(DataMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SourceServiceServer is the server API for SourceService service.
// All implementations must embed UnimplementedSourceServiceServer
// for forward compatibility
type SourceServiceServer interface {
	// Basic operations
	GetCapabilities(context.Context, *CapabilitiesRequest) (*CapabilitiesResponse, error)
	Configure(context.Context, *ConfigureRequest) (*ConfigureResponse, error)
	StartStreaming(*StartRequest, SourceService_StartStreamingServer) error
	StopStreaming(context.Context, *StopRequest) (*StopResponse, error)
	// State management
	GetState(context.Context, *GetStateRequest) (*GetStateResponse, error)
	SetState(context.Context, *SetStateRequest) (*SetStateResponse, error)
	// Health and monitoring
	CheckHealth(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// Data operations
	GetSnapshot(context.Context, *SnapshotRequest) (*SnapshotResponse, error)
	// Bidirectional streaming for interactive operations
	// Allows client to send commands during streaming
	InteractiveStreaming(SourceService_InteractiveStreamingServer) error
	mustEmbedUnimplementedSourceServiceServer()
}

// UnimplementedSourceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSourceServiceServer struct {
}

func (UnimplementedSourceServiceServer) GetCapabilities(context.Context, *CapabilitiesRequest) (*CapabilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCapabilities not implemented")
}
func (UnimplementedSourceServiceServer) Configure(context.Context, *ConfigureRequest) (*ConfigureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (UnimplementedSourceServiceServer) StartStreaming(*StartRequest, SourceService_StartStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method StartStreaming not implemented")
}
func (UnimplementedSourceServiceServer) StopStreaming(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopStreaming not implemented")
}
func (UnimplementedSourceServiceServer) GetState(context.Context, *GetStateRequest) (*GetStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedSourceServiceServer) SetState(context.Context, *SetStateRequest) (*SetStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetState not implemented")
}
func (UnimplementedSourceServiceServer) CheckHealth(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHealth not implemented")
}
func (UnimplementedSourceServiceServer) GetSnapshot(context.Context, *SnapshotRequest) (*SnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSnapshot not implemented")
}
func (UnimplementedSourceServiceServer) InteractiveStreaming(SourceService_InteractiveStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method InteractiveStreaming not implemented")
}
func (UnimplementedSourceServiceServer) mustEmbedUnimplementedSourceServiceServer() {}

// UnsafeSourceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SourceServiceServer will
// result in compilation errors.
type UnsafeSourceServiceServer interface {
	mustEmbedUnimplementedSourceServiceServer()
}

func RegisterSourceServiceServer(s grpc.ServiceRegistrar, srv SourceServiceServer) {
	s.RegisterService(&SourceService_ServiceDesc, srv)
}

func _SourceService_GetCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CapabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServiceServer).GetCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SourceService_GetCapabilities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServiceServer).GetCapabilities(ctx, req.(*CapabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourceService_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServiceServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SourceService_Configure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServiceServer).Configure(ctx, req.(*ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourceService_StartStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StartRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SourceServiceServer).StartStreaming(m, &sourceServiceStartStreamingServer{stream})
}

type SourceService_StartStreamingServer interface {
	Send(*DataMessage) error
	grpc.ServerStream
}

type sourceServiceStartStreamingServer struct {
	grpc.ServerStream
}

func (x *sourceServiceStartStreamingServer) Send(m *DataMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _SourceService_StopStreaming_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServiceServer).StopStreaming(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SourceService_StopStreaming_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServiceServer).StopStreaming(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourceService_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServiceServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SourceService_GetState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServiceServer).GetState(ctx, req.(*GetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourceService_SetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServiceServer).SetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SourceService_SetState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServiceServer).SetState(ctx, req.(*SetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourceService_CheckHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServiceServer).CheckHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SourceService_CheckHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServiceServer).CheckHealth(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourceService_GetSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServiceServer).GetSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SourceService_GetSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServiceServer).GetSnapshot(ctx, req.(*SnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourceService_InteractiveStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SourceServiceServer).InteractiveStreaming(&sourceServiceInteractiveStreamingServer{stream})
}

type SourceService_InteractiveStreamingServer interface {
	Send(*DataMessage) error
	Recv() (*StreamCommand, error)
	grpc.ServerStream
}

type sourceServiceInteractiveStreamingServer struct {
	grpc.ServerStream
}

func (x *sourceServiceInteractiveStreamingServer) Send(m *DataMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sourceServiceInteractiveStreamingServer) Recv() (*StreamCommand, error) {
	m := new(StreamCommand)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SourceService_ServiceDesc is the grpc.ServiceDesc for SourceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SourceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "source.SourceService",
	HandlerType: (*SourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCapabilities",
			Handler:    _SourceService_GetCapabilities_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _SourceService_Configure_Handler,
		},
		{
			MethodName: "StopStreaming",
			Handler:    _SourceService_StopStreaming_Handler,
		},
		{
			MethodName: "GetState",
			Handler:    _SourceService_GetState_Handler,
		},
		{
			MethodName: "SetState",
			Handler:    _SourceService_SetState_Handler,
		},
		{
			MethodName: "CheckHealth",
			Handler:    _SourceService_CheckHealth_Handler,
		},
		{
			MethodName: "GetSnapshot",
			Handler:    _SourceService_GetSnapshot_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartStreaming",
			Handler:       _SourceService_StartStreaming_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "InteractiveStreaming",
			Handler:       _SourceService_InteractiveStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "source/source.proto",
}

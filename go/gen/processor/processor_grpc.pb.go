// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: processor/processor.proto

package processor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProcessorService_GetCapabilities_FullMethodName    = "/processor.ProcessorService/GetCapabilities"
	ProcessorService_Configure_FullMethodName          = "/processor.ProcessorService/Configure"
	ProcessorService_Process_FullMethodName            = "/processor.ProcessorService/Process"
	ProcessorService_ProcessWithControl_FullMethodName = "/processor.ProcessorService/ProcessWithControl"
	ProcessorService_GetState_FullMethodName           = "/processor.ProcessorService/GetState"
	ProcessorService_CheckHealth_FullMethodName        = "/processor.ProcessorService/CheckHealth"
	ProcessorService_ProcessSingle_FullMethodName      = "/processor.ProcessorService/ProcessSingle"
)

// ProcessorServiceClient is the client API for ProcessorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProcessorServiceClient interface {
	// Basic operations
	GetCapabilities(ctx context.Context, in *CapabilitiesRequest, opts ...grpc.CallOption) (*CapabilitiesResponse, error)
	Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*ConfigureResponse, error)
	// Standard bidirectional streaming process
	Process(ctx context.Context, opts ...grpc.CallOption) (ProcessorService_ProcessClient, error)
	// Enhanced bidirectional streaming with control messages
	ProcessWithControl(ctx context.Context, opts ...grpc.CallOption) (ProcessorService_ProcessWithControlClient, error)
	// State management
	GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error)
	// Health check
	CheckHealth(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// Single message processing (for simple cases)
	ProcessSingle(ctx context.Context, in *DataMessage, opts ...grpc.CallOption) (*DataMessage, error)
}

type processorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProcessorServiceClient(cc grpc.ClientConnInterface) ProcessorServiceClient {
	return &processorServiceClient{cc}
}

func (c *processorServiceClient) GetCapabilities(ctx context.Context, in *CapabilitiesRequest, opts ...grpc.CallOption) (*CapabilitiesResponse, error) {
	out := new(CapabilitiesResponse)
	err := c.cc.Invoke(ctx, ProcessorService_GetCapabilities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processorServiceClient) Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*ConfigureResponse, error) {
	out := new(ConfigureResponse)
	err := c.cc.Invoke(ctx, ProcessorService_Configure_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processorServiceClient) Process(ctx context.Context, opts ...grpc.CallOption) (ProcessorService_ProcessClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProcessorService_ServiceDesc.Streams[0], ProcessorService_Process_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &processorServiceProcessClient{stream}
	return x, nil
}

type ProcessorService_ProcessClient interface {
	Send(*DataMessage) error
	Recv() (*DataMessage, error)
	grpc.ClientStream
}

type processorServiceProcessClient struct {
	grpc.ClientStream
}

func (x *processorServiceProcessClient) Send(m *DataMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *processorServiceProcessClient) Recv() (*DataMessage, error) {
	m := new(DataMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *processorServiceClient) ProcessWithControl(ctx context.Context, opts ...grpc.CallOption) (ProcessorService_ProcessWithControlClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProcessorService_ServiceDesc.Streams[1], ProcessorService_ProcessWithControl_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &processorServiceProcessWithControlClient{stream}
	return x, nil
}

type ProcessorService_ProcessWithControlClient interface {
	Send(*ProcessControlMessage) error
	Recv() (*ProcessControlMessage, error)
	grpc.ClientStream
}

type processorServiceProcessWithControlClient struct {
	grpc.ClientStream
}

func (x *processorServiceProcessWithControlClient) Send(m *ProcessControlMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *processorServiceProcessWithControlClient) Recv() (*ProcessControlMessage, error) {
	m := new(ProcessControlMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *processorServiceClient) GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error) {
	out := new(GetStateResponse)
	err := c.cc.Invoke(ctx, ProcessorService_GetState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processorServiceClient) CheckHealth(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, ProcessorService_CheckHealth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processorServiceClient) ProcessSingle(ctx context.Context, in *DataMessage, opts ...grpc.CallOption) (*DataMessage, error) {
	out := new(DataMessage)
	err := c.cc.Invoke(ctx, ProcessorService_ProcessSingle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProcessorServiceServer is the server API for ProcessorService service.
// All implementations must embed UnimplementedProcessorServiceServer
// for forward compatibility
type ProcessorServiceServer interface {
	// Basic operations
	GetCapabilities(context.Context, *CapabilitiesRequest) (*CapabilitiesResponse, error)
	Configure(context.Context, *ConfigureRequest) (*ConfigureResponse, error)
	// Standard bidirectional streaming process
	Process(ProcessorService_ProcessServer) error
	// Enhanced bidirectional streaming with control messages
	ProcessWithControl(ProcessorService_ProcessWithControlServer) error
	// State management
	GetState(context.Context, *GetStateRequest) (*GetStateResponse, error)
	// Health check
	CheckHealth(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// Single message processing (for simple cases)
	ProcessSingle(context.Context, *DataMessage) (*DataMessage, error)
	mustEmbedUnimplementedProcessorServiceServer()
}

// UnimplementedProcessorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProcessorServiceServer struct {
}

func (UnimplementedProcessorServiceServer) GetCapabilities(context.Context, *CapabilitiesRequest) (*CapabilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCapabilities not implemented")
}
func (UnimplementedProcessorServiceServer) Configure(context.Context, *ConfigureRequest) (*ConfigureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (UnimplementedProcessorServiceServer) Process(ProcessorService_ProcessServer) error {
	return status.Errorf(codes.Unimplemented, "method Process not implemented")
}
func (UnimplementedProcessorServiceServer) ProcessWithControl(ProcessorService_ProcessWithControlServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessWithControl not implemented")
}
func (UnimplementedProcessorServiceServer) GetState(context.Context, *GetStateRequest) (*GetStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedProcessorServiceServer) CheckHealth(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHealth not implemented")
}
func (UnimplementedProcessorServiceServer) ProcessSingle(context.Context, *DataMessage) (*DataMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessSingle not implemented")
}
func (UnimplementedProcessorServiceServer) mustEmbedUnimplementedProcessorServiceServer() {}

// UnsafeProcessorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProcessorServiceServer will
// result in compilation errors.
type UnsafeProcessorServiceServer interface {
	mustEmbedUnimplementedProcessorServiceServer()
}

func RegisterProcessorServiceServer(s grpc.ServiceRegistrar, srv ProcessorServiceServer) {
	s.RegisterService(&ProcessorService_ServiceDesc, srv)
}

func _ProcessorService_GetCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CapabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessorServiceServer).GetCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProcessorService_GetCapabilities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessorServiceServer).GetCapabilities(ctx, req.(*CapabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessorService_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessorServiceServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProcessorService_Configure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessorServiceServer).Configure(ctx, req.(*ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessorService_Process_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProcessorServiceServer).Process(&processorServiceProcessServer{stream})
}

type ProcessorService_ProcessServer interface {
	Send(*DataMessage) error
	Recv() (*DataMessage, error)
	grpc.ServerStream
}

type processorServiceProcessServer struct {
	grpc.ServerStream
}

func (x *processorServiceProcessServer) Send(m *DataMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *processorServiceProcessServer) Recv() (*DataMessage, error) {
	m := new(DataMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ProcessorService_ProcessWithControl_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProcessorServiceServer).ProcessWithControl(&processorServiceProcessWithControlServer{stream})
}

type ProcessorService_ProcessWithControlServer interface {
	Send(*ProcessControlMessage) error
	Recv() (*ProcessControlMessage, error)
	grpc.ServerStream
}

type processorServiceProcessWithControlServer struct {
	grpc.ServerStream
}

func (x *processorServiceProcessWithControlServer) Send(m *ProcessControlMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *processorServiceProcessWithControlServer) Recv() (*ProcessControlMessage, error) {
	m := new(ProcessControlMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ProcessorService_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessorServiceServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProcessorService_GetState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessorServiceServer).GetState(ctx, req.(*GetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessorService_CheckHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessorServiceServer).CheckHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProcessorService_CheckHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessorServiceServer).CheckHealth(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessorService_ProcessSingle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessorServiceServer).ProcessSingle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProcessorService_ProcessSingle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessorServiceServer).ProcessSingle(ctx, req.(*DataMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// ProcessorService_ServiceDesc is the grpc.ServiceDesc for ProcessorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProcessorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "processor.ProcessorService",
	HandlerType: (*ProcessorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCapabilities",
			Handler:    _ProcessorService_GetCapabilities_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _ProcessorService_Configure_Handler,
		},
		{
			MethodName: "GetState",
			Handler:    _ProcessorService_GetState_Handler,
		},
		{
			MethodName: "CheckHealth",
			Handler:    _ProcessorService_CheckHealth_Handler,
		},
		{
			MethodName: "ProcessSingle",
			Handler:    _ProcessorService_ProcessSingle_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Process",
			Handler:       _ProcessorService_Process_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ProcessWithControl",
			Handler:       _ProcessorService_ProcessWithControl_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "processor/processor.proto",
}
